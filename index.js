// Generated by CoffeeScript 1.4.0

/*
# object.watch polyfill

## authors:

- eli grey, http://eligrey.com
- bryn austin bellomy <bryn.bellomy@gmail.com>
 
NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
*/


(function() {

  if (Object.prototype.watch == null) {
    Object.defineProperty(Object.prototype, 'watch', {
      enumerable: false,
      configurable: true,
      writable: false,
      value: function(prop, handler) {
        var getter, newval, oldval, setter, _base, _ref, _ref1;
        if ((_ref = this.__watch_handlers) == null) {
          this.__watch_handlers = {};
        }
        if ((_ref1 = (_base = this.__watch_handlers)[prop]) == null) {
          _base[prop] = [];
        }
        this.__watch_handlers[prop].push(handler);
        oldval = this[prop];
        newval = oldval;
        getter = function() {
          return newval;
        };
        setter = function(val) {
          var fn, _i, _len, _ref2, _results;
          oldval = newval;
          newval = val;
          _ref2 = this.__watch_handlers[prop];
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            fn = _ref2[_i];
            _results.push(fn.call(this, prop, oldval, val));
          }
          return _results;
        };
        if (delete this[prop]) {
          return Object.defineProperty(this, prop, {
            get: getter,
            set: setter,
            enumerable: true,
            configurable: true
          });
        }
      }
    });
  }

  if (Object.prototype.unwatch == null) {
    Object.defineProperty(Object.prototype, 'unwatch', {
      enumerable: false,
      configurable: true,
      writable: false,
      value: function(prop) {
        var val;
        val = this[prop];
        delete this[prop];
        return this[prop] = val;
      }
    });
  }

}).call(this);
